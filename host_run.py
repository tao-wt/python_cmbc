#!/usr/bin/env python # encoding:utf-8import syssys.path.append("..")from lib.IpSQLClass import *from lib.ParamikoClass import *from optparse import OptionParserimport multiprocessing#申明使用的用户，获取用户名端口密码t = SQLClass()role_list=['teatalk','public','fastdfs','redis','hadoop','mysql']userInfo = t.findUserPass('zhuser')host_list = []for i in userInfo:    user = i[0]    port = i[1]    passwd = i[2]#帮助信息函数def helpFunc(a,b,c,d):    print "\033[33;1m..."    print "-a|--all (all ip in DB) -i|--ip (ip address) -c|--cmd (execute commands)"    print "-a|--all (all ip in DB) -i|--ip (ip address) -f|--file (source file) -d|--dst (destination path)"    print "-a|--all (all ip in DB) -i|--ip (ip address) -r|--role ipgroup,(teatalk,public,fastdfs,redis,hadoop,mysql)"    print ""    print "python runhost.py -a -c 'ifconfig eth0'  |python runhost.py -i 192.168.1.1,10.10.10.1 -c 'ifconfig eth0'"    print "python runhost.py -a -c 'ifconfig eth0'  |python runhost.py -i 192.168.1.1-192.168.1.10 -c 'ifconfig eth0'"    print "python runhost.py -a -f '/tmp/test.sh' -d '/tmp/'    |python runhost.py -i 192.168.1.1,10.10.10.1 -f '/tmp/test.sh' -d '/etc/'"    print "python runhost.py -r redis,hadoop -f '/tmp/test.sh' -d '/tmp/'  |python runhost.py -r mysql -c 'pwd'"    print "...\033[0m"    sys.exit(3)#帮助信息功能parser = OptionParser(add_help_option=0)parser.add_option("-h", "--help", action="callback", callback=helpFunc)parser.add_option("-c", "--cmd", action="store", type="string", dest="cmd",default="")parser.add_option("-i", "--ip", action="store", type="string", dest="ip",default="")parser.add_option("-f", "--file", action="store", type="string", dest="file",default="")parser.add_option("-d", "--dst", action="store", type="string", dest="dst",default="")parser.add_option("-r", "--role", action="store", type="string", dest="role",default="")parser.add_option("-a", "--all", action="store_true", dest="all")(options, args) = parser.parse_args()singleip=options.ipruncmd=options.cmdallip=options.allputfile=options.filedstpath=options.dstrole=options.role.split(',')commandoption=argsinIpList=singleip.split(',')#执行命令函数def runCmd(ip):    try:        L=ParamikoClass(ip,port,user,passwd)        L.cmd_runhost(runcmd)    except:        print '%s cat not be login,please check it!'  %ip#对所有设备执行命令函数def runCmdAll(ip):    try:        L=ParamikoClass(ip[0],port,user,passwd)        L.cmd_runhost(runcmd)    except:        print '%s cat not be login,please check it!'  %ip#发送文件def sendFile(ip):    L=ParamikoClass(ip,port,user,passwd)    L.put_file(putfile,dstpath)#对所有设备进行发送文件def sendFileAll(ip):    L=ParamikoClass(str(ip[0]),port,user,passwd)    L.put_file(putfile,dstpath)pool = multiprocessing.Pool(processes=10)#以ip执行命令if len(runcmd) != 0 and len(singleip) != 0 and '-' in singleip:    doubleip=singleip.split('-')    start=doubleip[0].split('.')[-1]    end=doubleip[1].split('.')[-1]    prefix='.'.join(doubleip[0].split('.')[0:3])    tempIpList = []    for rangeip in range(int(start),int(end)+1):        rip=prefix +'.'+''.join(str(rangeip))        tempIpList.append(str(rip))    #print type(tempIpList)    print tempIpList    inIpList=tempIpList    tmpList = []    for i in t.AllIpList():        tmpList.append(str(i[0]))    for ip in inIpList:        if ip not in tmpList:            print ('\033[31;1mIP\033[0m \033[32;1m%s\033[0m \033[31;1mis not available\033[0m'%ip)        else:            pool.apply_async(runCmd,(ip,))    pool.close()    pool.join()if len(runcmd) != 0 and len(inIpList[0]) != 0:    tmpList = []    for i in t.AllIpList():        tmpList.append(str(i[0]))    for ip in inIpList:        if ip not in tmpList:            print ('\033[31;1mIP\033[0m \033[32;1m%s\033[0m \033[31;1mis not available\033[0m'%ip)        else:            pool.apply_async(runCmd,(ip,))    pool.close()    pool.join()#对所有设备执行命令elif len(runcmd) != 0 and allip == True:    for ip in t.AllIpList():        pool.apply_async(runCmdAll,(ip,))    pool.close()    pool.join()#对IP上传文件elif len(putfile) != 0 and len(inIpList[0]) != 0:    tmpList = []    for i in t.AllIpList():        tmpList.append(str(i[0]))    for ip in inIpList:        if ip in tmpList:            pool.apply_async(sendFile,(ip,))        else:            print ('\033[31;1mIP\033[0m \033[32;1m%s\033[0m \033[31;1mis not available\033[0m'%ip)    pool.close()    pool.join()#对所有ip上传文件elif len(putfile) != 0 and allip == True:    for ip in t.AllIpList():        pool.apply_async(sendFileAll,(ip,))    pool.close()    pool.join()#对角色类设备上传文件elif len(putfile) != 0 and len(role) != 0:    for i in role:        if i not in role_list:            print "'%s' is not in role_list, please -h for help ."            sys.exit()        if i == 'teatalk':            i = 'module'        for n in t.FindRoleIp(i):            host_list.append(n[0])    host_list = set(host_list)    for ip in host_list:        pool.apply_async(sendFile,(ip,))    pool.close()    pool.join()#对角色类执行命令elif len(runcmd) != 0 and len(role) != 0:    for i in role:        if i not in role_list:            print "'%s' is not in role_list, please -h for help ." %i            sys.exit()        if i == 'teatalk':            i = 'module'        for n in t.FindRoleIp(i):            host_list.append(n[0])    host_list = set(host_list)    for ip in host_list:        pool.apply_async(runCmd,(ip,))    pool.close()    pool.join()#其他抛异常else:    helpFunc('a','b','c','d')
